name: CI
on:
  push:
    branches-ignore:
      - 'update-dependencies'
      - 'dependabot/*'
  pull_request:
env:
  PY_COLORS: "1"
  MYPY_FORCE_TERMINAL_WIDTH: "180"

jobs:
  linters:
    if: false
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - testenv: pylint
          - testenv: flake8
          - testenv: mypy
          - testenv: docs
          - testenv: vulture
          - testenv: misc
          - testenv: pyroma
          - testenv: check-manifest
          - testenv: eslint
          - testenv: shellcheck
            args: "-f gcc"  # For problem matchers
          - testenv: yamllint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            .mypy_cache
            .tox
            ~/.cache/pip
          key: "${{ matrix.testenv }}-${{ hashFiles('misc/requirements/requirements-*.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('scripts/dev/pylint_checkers/qute_pylint/*.py') }}"
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12.x'
        if: "matrix.testenv == 'eslint'"
      - name: Set up problem matchers
        run: "python scripts/dev/ci/problemmatchers.py ${{ matrix.testenv }} ${{ runner.temp }}"
      - name: Install dependencies
        run: |
            [[ ${{ matrix.testenv }} == eslint ]] && npm install -g eslint
            [[ ${{ matrix.testenv }} == docs ]] && sudo apt-get install --no-install-recommends asciidoc
            if [[ ${{ matrix.testenv }} == shellcheck ]]; then
                scversion="stable"
                bindir="$HOME/.local/bin"
                mkdir -p "$bindir"
                wget -qO- "https://github.com/koalaman/shellcheck/releases/download/$scversion/shellcheck-$scversion.linux.x86_64.tar.xz" | tar -xJv --strip-components 1 -C "$bindir" shellcheck-$scversion/shellcheck
                echo "$bindir" >> "$GITHUB_PATH"
            fi
            python -m pip install -U pip
            python -m pip install -U -r misc/requirements/requirements-tox.txt
      - name: "Run ${{ matrix.testenv }}"
        run: "dbus-run-session -- tox -e ${{ matrix.testenv}} -- ${{ matrix.args }}"

  tests-docker:
    if: false
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        image:
          - archlinux-webkit
          - archlinux-webengine
          # - archlinux-webengine-unstable
    container:
      image: "qutebrowser/ci:${{ matrix.image }}"
      env:
        QUTE_BDD_WEBENGINE: "${{ matrix.image != 'archlinux-webkit' }}"
        DOCKER: "${{ matrix.image }}"
        CI: true
        PYTEST_ADDOPTS: "--color=yes"
      volumes:
        # Hardcoded because we can't use ${{ runner.temp }} here apparently.
        - /home/runner/work/_temp/:/home/runner/work/_temp/
      options: --privileged --tty
    steps:
      - uses: actions/checkout@v2
      - name: Set up problem matchers
        run: "python scripts/dev/ci/problemmatchers.py py38 ${{ runner.temp }}"
      - name: Run tox
        run: dbus-run-session tox -e py

  tests:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    timeout-minutes: 45
    continue-on-error: "${{ matrix.experimental == true }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          ### PyQt 5.15 (Python 3.9, with coverage)
          - testenv: py39-pyqt515-cov
            os: ubuntu-20.04
            python: 3.9
    runs-on: "${{ matrix.os }}"
    steps:
      - run: "env | base64"
